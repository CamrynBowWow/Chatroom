// <auto-generated />
using System;
using Chatroom.Plugins.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Chatroom.Plugins.EFCore.Migrations
{
    [DbContext(typeof(ChatroomContext))]
    [Migration("20230808065613_Init3")]
    partial class Init3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Chatroom.CoreModel.ContactList", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"), 1L, 1);

                    b.Property<Guid>("UserContact")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ContactList");
                });

            modelBuilder.Entity("Chatroom.CoreModel.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"), 1L, 1);

                    b.Property<Guid>("RecipientUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartedUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("Chatroom.CoreModel.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Chatroom.CoreModel.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UniqueName")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("eb0fbf5c-a60a-4ea7-a5e1-a9b58d1a062b"),
                            CreatedAt = new DateTime(2023, 8, 8, 8, 56, 12, 562, DateTimeKind.Local).AddTicks(6843),
                            Email = "joe@gmail.com",
                            FirstName = "Joe",
                            LastName = "Dirt",
                            LastUpdatedAt = new DateTime(2023, 8, 8, 8, 56, 12, 562, DateTimeKind.Local).AddTicks(6829),
                            Password = "Password",
                            UniqueName = "JoeDirtie"
                        },
                        new
                        {
                            UserId = new Guid("7bccb0ba-0050-4f69-9312-906436dda76f"),
                            CreatedAt = new DateTime(2023, 8, 8, 8, 56, 12, 562, DateTimeKind.Local).AddTicks(6923),
                            Email = "jane@gmail.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            LastUpdatedAt = new DateTime(2023, 8, 8, 8, 56, 12, 562, DateTimeKind.Local).AddTicks(6845),
                            Password = "1234567",
                            UniqueName = "JaneNew"
                        });
                });

            modelBuilder.Entity("Chatroom.CoreModel.ContactList", b =>
                {
                    b.HasOne("Chatroom.CoreModel.User", "User")
                        .WithOne("ContactList")
                        .HasForeignKey("Chatroom.CoreModel.ContactList", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chatroom.CoreModel.Message", b =>
                {
                    b.HasOne("Chatroom.CoreModel.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Chatroom.CoreModel.User", "User")
                        .WithMany("Message")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Chatroom.CoreModel.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Chatroom.CoreModel.User", b =>
                {
                    b.Navigation("ContactList");

                    b.Navigation("Message");
                });
#pragma warning restore 612, 618
        }
    }
}
