@page "/userChat/{OtherUserUniqueName}/{Id}"

@inject IMessageActions MessageActions
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="css/userChat.css" />
</head>

<AuthorizeView>
    <div class="parent-chat-container">
        <div class="chat-container">

            @if (messagesList != null)
            {
                @foreach (var message in messagesList)
                {
                    <div class="@(new Guid(sidClaim) == message.UserId ? "host-message-container" : "recipientUser-message-container")">
                        <div class="@(new Guid(sidClaim) == message.UserId ? "host-div" : "recipientUser-div")">
                            <p>@message.Context</p>
                            <div class="date-container">
                                <h4>@message.Created?.ToString("dd MMM yyyy HH:mm")</h4>
                            </div>
                        </div>
                    </div>
                }
            }

        </div>

        <textarea @ref="textareaRef" @oninput="UpdateTextAreaHeight" rows="2" maxlength="254" class="text-container" @bind="inputText">
            @inputText
        </textarea>

    </div>
</AuthorizeView>

@code {
    [Parameter]
    public string OtherUserUniqueName { get; set; }

    [Parameter]
    public string Id { get; set; }
    private string OtherUserId;

    private string inputText = "";
    private ElementReference textareaRef;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private string sidClaim;

    private List<Message> messagesList = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;

        sidClaim = user.FindFirstValue(ClaimTypes.Sid);   
    }

    protected override async Task OnParametersSetAsync()
    {
        OtherUserId = Encoding.UTF8.GetString(Convert.FromBase64String(Id));

        messagesList = await MessageActions.FetchMessages(new Guid(sidClaim), new Guid(OtherUserId));

        await base.OnParametersSetAsync();
    }

    private async Task UpdateTextAreaHeight(ChangeEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("autoGrowTextArea", textareaRef);
    }
}
