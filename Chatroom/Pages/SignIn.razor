@page "/signin"

@inject IJSRuntime JSRuntime
@inject IUserActions UserActions
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Sign In</PageTitle>

<head>
    <link rel="stylesheet" href="css/signin.css" />
</head>

@if (!isLoaded)
{
    <LoadingScreenComponent></LoadingScreenComponent>
    return;
}

<div class="parent-container">
    <div class="header">
        <h3>Sign In</h3>
    </div>

    <div class="main-container">
        <div class="child-container">
            <div class="input-container">
                <label>Email</label>
                <input class="default-input form-control" @bind-value="user.Email" type="email" name="email" placeholder="Enter Email..." />
            </div>

            <div class="input-container">
                <label>Password</label>
                <input class="default-input form-control" @bind-value="user.Password" type="password" name="password" placeholder="Enter Password..." />
            </div>

            <button type="button" class="btn btn-outline-primary" @onclick="SignInSubmit">Sign In</button>
            
            <div class="link-div">
                <a href="/register">Register</a>
                <a href="/forgotPassword">Forgot Password?</a>
            </div>
        </div>
    </div>

</div>


@code {
    bool isLoaded = false;

    private User? user = new User();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        isLoaded = true;
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SignInSubmit();
        }
    }



    // TODO: Make sure email is lowercase
    private async void SignInSubmit()
    {
        if (String.IsNullOrWhiteSpace(user.Email) || String.IsNullOrWhiteSpace(user.Password))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please Fill in your details or Register");
            return;
        }       

        bool signInResponse = await UserActions.SignInAction(user.Email, user.Password);

        if (signInResponse)
        {
            User userDetails = await UserActions.GetUserDetails(user.Email);

            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

            await customAuthStateProvider.UpdateAuthenticationState(new User
            {
                UserId = userDetails.UserId,
                Email = userDetails.Email,
                UniqueName = userDetails.UniqueName
            });

            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "No Account exist. Please fill in correct details or Register");
        }
    }
}